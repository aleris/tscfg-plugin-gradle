package io.github.aleris.plugins.tscfg

import tscfg.generators.GenOpts
import tscfg.generators.java.JavaGen

/**
 * Generates a class from a tscfg spec.
 *
 * @param task the task that is generating the class.
 */
class ClassGenerator(val task: GenerateTscfgTask) {

  /**
   * Generates a class from a tscfg spec.
   *
   * @param configSource the source of the tscfg spec.
   * @return the generated class text.
   */
  fun generate(configSource: ConfigSource): String {
    val configFile = configSource.configFile
    val packageName = configFile.packageName.get()
    val className = configFile.className.get()

    val assumeAllRequired = false
    val generateJava7Code = false
    val generateScala12Code = false
    val useBackticks = false
    val generateGetters = task.generateGetters.get()
    val generateRecords = task.generateRecords.get()
    val useOptionals = task.useOptionals.get()
    val useDurations = task.useDurations.get()
    val genOpts = GenOpts(
      packageName,
      className,
      assumeAllRequired,
      generateJava7Code,
      generateScala12Code,
      useBackticks,
      generateGetters,
      generateRecords,
      useOptionals,
      useDurations
    )
    val generator = JavaGen(genOpts, configSource.namespace)

    val genResult = generator.generate(configSource.objectType)

    val code = genResult.code()
    val amendedCode = amendCode(code, configFile.specFile.get().asFile.path, task.addGeneratedAnnotation.get())
    return amendedCode
  }

  /**
   * Amends the tscfg generated code with a header and a generated annotation.
   *
   * @param code the previously generated code.
   * @param configSpecFilePath the name of the tscfg spec file to be included in the header.
   * @param includeGeneratedAnnotation whether to include the generated annotation.
   */
  private fun amendCode(code: String, configSpecFilePath: String, includeGeneratedAnnotation: Boolean): String {
    var codeProcessed = code
    if (includeGeneratedAnnotation) {
      val generatedAnnotation = """@jakarta.annotation.Generated(
value = "com.adobe.aep.uis.idresolution.gradle.TscgfPlugin",
comments = "This class is generated by the TscgfPlugin")"""
      val codeAnnotated = code
        .replace("public class ", "$generatedAnnotation\npublic class ")
        .replace("public record ", "$generatedAnnotation\npublic record ")
      codeProcessed = codeAnnotated
    }
    val codeWithHeader = "/* Generated with `${task.name}` Gradle task */\n" +
        "/* Do not edit this file manually, change spec in `$configSpecFilePath` */\n\n" +
        "$codeProcessed\n"
    return codeWithHeader
  }
}
